#!/bin/sh

## usage: QM_gaussian_run filename filetype outfile ncore mem charge multiplicity type hamiltonian basis symmetry accuracy counterpoise 
##                           1         2      3       4    5   6        7          8     9           10      11      12         13
QM_gaussian_run() {
  com="#"
  case $8 
	sp)
	;;
	opt) com="$com opt"
	;;
	optmax) com="$com opt(MaxCycle=600)"
	;;
	optzmat) com="$com opt(Z-MATRIX,MaxCycle=300)"
	;;
	scan) com="$com opt=ModRedundant"
	;;
	esp) com="$com prop=(read,field)"
	;;
	*) echo"GAUSSIAN INTERFACE WARNING: will use $8. It is unknown by GAAMP"
	   com="$com $8"
	;;
  esac
  case $9
	am1) com="$com am1"
	;;
	pm3) com="$com pm3"
	;;
	pm6) com="$com pm6"
	;;
	pbe) com="$com pbepbe/${10}" 
	;;
	pbe0) com="$com pbe1pbe/${10}"
	;;
	*) com="$com $9/${10}" 
	;;
  esac
  case ${11}
	1) com="$com nosymm"
	;; 
	*)
	;;
  esac
  case ${12}
	1) com="$com SCF=Tight"
	;;
	*)
	;;
  esac
  case ${13}
	0) 
	;;
	*) com="$com counterpoise=${13}"
	;;
  esac 

  if [ $2 -ne "gjf" ]; then
    Gopt BABELDIR/bin/babel -i$2 $1 -ogjf mol.gjf
  fi

  linenum=`wc -l mol.gjf | awk '{print $1}'`
  echo "%cpu=$4"
  echo "%mem=$5GB" >> mol-opt.gjf
  echo "$com" >> mol-opt.gjf
  echo " " >> mol-opt.gjf
  echo "Mol - Generated by GAAMP's Gaussian interface " >> mol-opt.gjf
  echo " " >> mol-opt.gjf
  echo "$6 $7" >> mol-opt.gjf
  leftline=`expr $linenum - 5`
  tail -n $leftline mol.gjf >> mol-opt.gjf

  $GAU09EXE < mol-opt.gjf > $3
  CheckError "Error using gaussian"

  exit 0
}
